// FICHIER MODIFI√â : background_notification_service.dart
// Changements pour passer de 5 minutes √† 8 heures

import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;
import 'dart:convert';
import 'notification_service.dart';

class BackgroundNotificationService {
  static const String _backgroundChannelId = 'background_reminders_8h'; // MODIFI√â : ajout√© _8h
  static const int _backgroundNotificationId = 5000;
  static const int _periodicReminderBaseId = 6000;

  // Initialiser le service de notifications en arri√®re-plan
  static Future<void> initialize() async {
    print('üîÑ Initialisation service notifications arri√®re-plan (8h)...'); // MODIFI√â

    try {
      // Initialiser les fuseaux horaires
      tz.initializeTimeZones();

      // Cr√©er le canal de notification pour l'arri√®re-plan
      await _createBackgroundNotificationChannel();

      print('‚úÖ Service arri√®re-plan (8h) initialis√©'); // MODIFI√â
    } catch (e) {
      print('‚ùå Erreur initialisation arri√®re-plan: $e');
    }
  }

  // Cr√©er le canal de notification pour les rappels en arri√®re-plan
  static Future<void> _createBackgroundNotificationChannel() async {
    final FlutterLocalNotificationsPlugin notifications =
    FlutterLocalNotificationsPlugin();

    final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
    notifications.resolvePlatformSpecificImplementation<
        AndroidFlutterLocalNotificationsPlugin>();

    if (androidImplementation != null) {
      await androidImplementation.createNotificationChannel(
        const AndroidNotificationChannel(
          _backgroundChannelId,
          'Rappels automatiques (8h)', // MODIFI√â
          description: 'Rappels automatiques des √©valuations toutes les 8 heures', // MODIFI√â
          importance: Importance.high,
          enableVibration: true,
          playSound: true,
          showBadge: true,
        ),
      );

      print('üì∫ Canal de notifications arri√®re-plan (8h) cr√©√©'); // MODIFI√â
    }
  }

  // MODIFI√â : Programmer les rappels toutes les 8 heures
  static Future<void> schedulePeriodicReminders({
    required String userName,
    required int userId,
    required List<Map<String, dynamic>> urgentEvaluations,
  }) async {
    final FlutterLocalNotificationsPlugin notifications =
    FlutterLocalNotificationsPlugin();

    try {
      print('‚è∞ Programmation rappels p√©riodiques toutes les 8 heures...'); // MODIFI√â

      // Annuler les anciens rappels p√©riodiques
      await cancelPeriodicReminders();

      if (urgentEvaluations.isEmpty) {
        print('‚ÑπÔ∏è Aucune √©valuation urgente, pas de rappels p√©riodiques');
        return;
      }

      // MODIFI√â : Programmer les rappels pour les 7 prochains jours (21 rappels de 8h)
      // 7 jours √ó 3 rappels par jour = 21 rappels au total
      final now = tz.TZDateTime.now(tz.local);

      for (int i = 1; i <= 21; i++) { // MODIFI√â : 21 rappels au lieu de 24
        final reminderTime = now.add(Duration(hours: i * 8)); // MODIFI√â : 8 heures au lieu de 5 minutes

        // Cr√©er le message de rappel
        String reminderMessage = _createReminderMessage(urgentEvaluations, i);

        await notifications.zonedSchedule(
          _periodicReminderBaseId + i,
          'üîî Rappel √©valuations (8h)', // MODIFI√â
          reminderMessage,
          reminderTime,
          NotificationDetails(
            android: AndroidNotificationDetails(
              _backgroundChannelId,
              'Rappels automatiques (8h)', // MODIFI√â
              channelDescription: 'Rappels automatiques des √©valuations toutes les 8h', // MODIFI√â
              importance: _getImportanceForReminder(urgentEvaluations),
              priority: _getPriorityForReminder(urgentEvaluations),
              icon: '@mipmap/ic_launcher',
              color: Colors.orange,
              enableVibration: true,
              playSound: true,
              autoCancel: true,
              ongoing: false,
              styleInformation: BigTextStyleInformation(
                reminderMessage,
                summaryText: 'OuiBuddy - Rappel automatique (8h)', // MODIFI√â
                contentTitle: 'üîî Rappel √©valuations (8h)', // MODIFI√â
              ),
            ),
            iOS: DarwinNotificationDetails(
              presentAlert: true,
              presentBadge: true,
              presentSound: true,
              sound: 'default',
              subtitle: 'Rappel automatique (8h)', // MODIFI√â
              threadIdentifier: 'periodic_reminder_8h', // MODIFI√â
              interruptionLevel: _hasEvaluationsToday(urgentEvaluations)
                  ? InterruptionLevel.critical
                  : InterruptionLevel.active,
            ),
          ),
          androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
          uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
          payload: json.encode({
            'type': 'periodic_reminder_8h', // MODIFI√â
            'user_id': userId,
            'user_name': userName,
            'reminder_number': i,
            'evaluations_count': urgentEvaluations.length,
            'scheduled_at': reminderTime.toIso8601String(),
          }),
        );
      }

      print('‚úÖ ${21} rappels p√©riodiques (8h) programm√©s pour les 7 prochains jours'); // MODIFI√â

      // MODIFI√â : Programmer la reprogrammation automatique dans 7 jours
      await _scheduleReprogramming(userName, userId, urgentEvaluations);

    } catch (e) {
      print('‚ùå Erreur programmation rappels p√©riodiques (8h): $e'); // MODIFI√â
    }
  }

  // MODIFI√â : Cr√©er le message de rappel personnalis√©
  static String _createReminderMessage(List<Map<String, dynamic>> evaluations, int reminderNumber) {
    final todayEvaluations = evaluations.where((e) => e['isToday'] == true).toList();
    final tomorrowEvaluations = evaluations.where((e) => e['isTomorrow'] == true).toList();
    final soonEvaluations = evaluations.where((e) =>
    e['isToday'] != true && e['isTomorrow'] != true && e['daysUntil'] <= 3
    ).toList();

    String message = '';

    if (todayEvaluations.isNotEmpty) {
      message += 'üö® ${todayEvaluations.length} √©valuation(s) AUJOURD\'HUI !\n';
      for (final eval in todayEvaluations.take(2)) { // Max 2 pour la lisibilit√©
        message += '‚Ä¢ ${eval['topic'] ?? 'Mati√®re'}: ${eval['description'] ?? '√âvaluation'}\n';
      }
      if (todayEvaluations.length > 2) {
        message += '‚Ä¢ ... et ${todayEvaluations.length - 2} autre(s)\n';
      }
    }

    if (tomorrowEvaluations.isNotEmpty) {
      message += '‚ö†Ô∏è ${tomorrowEvaluations.length} √©valuation(s) DEMAIN\n';
      for (final eval in tomorrowEvaluations.take(1)) {
        message += '‚Ä¢ ${eval['topic'] ?? 'Mati√®re'}: ${eval['description'] ?? '√âvaluation'}\n';
      }
    }

    if (soonEvaluations.isNotEmpty && message.length < 100) { // √âviter les messages trop longs
      message += 'üìö ${soonEvaluations.length} autre(s) cette semaine';
    }

    if (message.isEmpty) {
      message = 'üìö V√©rifiez vos √©valuations √† venir';
    }

    // MODIFI√â : Ajouter un indicateur de progression en heures
    final timeElapsed = reminderNumber * 8; // MODIFI√â : 8 heures au lieu de 5 minutes
    final daysElapsed = (timeElapsed / 24).floor();
    final hoursRemaining = timeElapsed % 24;

    if (daysElapsed > 0) {
      message += '\n‚è∞ Rappel automatique (${daysElapsed}j ${hoursRemaining}h)'; // MODIFI√â
    } else {
      message += '\n‚è∞ Rappel automatique (${hoursRemaining}h)'; // MODIFI√â
    }

    return message.trim();
  }

  // D√©terminer l'importance de la notification
  static Importance _getImportanceForReminder(List<Map<String, dynamic>> evaluations) {
    if (evaluations.any((e) => e['isToday'] == true)) {
      return Importance.max; // Critique pour aujourd'hui
    } else if (evaluations.any((e) => e['isTomorrow'] == true)) {
      return Importance.high; // Important pour demain
    }
    return Importance.defaultImportance; // Normal pour le reste
  }

  // D√©terminer la priorit√© de la notification
  static Priority _getPriorityForReminder(List<Map<String, dynamic>> evaluations) {
    if (evaluations.any((e) => e['isToday'] == true)) {
      return Priority.max;
    } else if (evaluations.any((e) => e['isTomorrow'] == true)) {
      return Priority.high;
    }
    return Priority.defaultPriority;
  }

  // V√©rifier s'il y a des √©valuations aujourd'hui
  static bool _hasEvaluationsToday(List<Map<String, dynamic>> evaluations) {
    return evaluations.any((e) => e['isToday'] == true);
  }

  // MODIFI√â : Programmer la reprogrammation automatique
  static Future<void> _scheduleReprogramming(
      String userName,
      int userId,
      List<Map<String, dynamic>> urgentEvaluations,
      ) async {
    final FlutterLocalNotificationsPlugin notifications =
    FlutterLocalNotificationsPlugin();

    try {
      final reprogramTime = tz.TZDateTime.now(tz.local).add(const Duration(days: 7)); // MODIFI√â : 7 jours au lieu de 2 heures

      await notifications.zonedSchedule(
        _backgroundNotificationId,
        'üîÑ Reprogrammation automatique (8h)', // MODIFI√â
        'Renouvellement des rappels d\'√©valuations toutes les 8h', // MODIFI√â
        reprogramTime,
        const NotificationDetails(
          android: AndroidNotificationDetails(
            _backgroundChannelId,
            'Rappels automatiques (8h)', // MODIFI√â
            importance: Importance.low,
            priority: Priority.low,
            ongoing: false,
            autoCancel: true,
          ),
          iOS: DarwinNotificationDetails(
            presentAlert: false,
            presentBadge: false,
            presentSound: false,
          ),
        ),
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
        uiLocalNotificationDateInterpretation:
        UILocalNotificationDateInterpretation.absoluteTime,
        payload: json.encode({
          'type': 'auto_reprogram_8h', // MODIFI√â
          'user_id': userId,
          'user_name': userName,
          'evaluations': urgentEvaluations,
        }),
      );

      print('‚è∞ Reprogrammation automatique (8h) pr√©vue dans 7 jours'); // MODIFI√â
    } catch (e) {
      print('‚ùå Erreur programmation reprogrammation (8h): $e'); // MODIFI√â
    }
  }

  // Annuler tous les rappels p√©riodiques
  static Future<void> cancelPeriodicReminders() async {
    final FlutterLocalNotificationsPlugin notifications =
    FlutterLocalNotificationsPlugin();

    try {
      // Annuler la reprogrammation
      await notifications.cancel(_backgroundNotificationId);

      // Annuler tous les rappels p√©riodiques
      for (int i = 1; i <= 50; i++) { // Un peu plus large pour √™tre s√ªr
        await notifications.cancel(_periodicReminderBaseId + i);
      }

      print('‚úÖ Tous les rappels p√©riodiques (8h) annul√©s'); // MODIFI√â
    } catch (e) {
      print('‚ùå Erreur annulation rappels p√©riodiques (8h): $e'); // MODIFI√â
    }
  }

  // Programmer les rappels √† partir des √©valuations
  static Future<void> scheduleFromEvaluations(
      String userName,
      int userId,
      List<dynamic> evaluations, // Liste des objets Evaluation
      ) async {
    try {
      // Convertir les √©valuations en format Map pour le stockage
      final urgentEvaluations = evaluations
          .where((eval) => eval.isToday || eval.isTomorrow || eval.daysUntil <= 3)
          .map((eval) => {
        'id': eval.id,
        'description': eval.description ?? '√âvaluation',
        'topic': eval.topicCategory?.name ?? 'Mati√®re',
        'date': eval.evaluationDateFormatted,
        'isToday': eval.isToday,
        'isTomorrow': eval.isTomorrow,
        'daysUntil': eval.daysUntil,
        'urgencyText': eval.urgencyText,
      })
          .toList();

      print('üì± Programmation rappels automatiques (8h) pour ${urgentEvaluations.length} √©valuations urgentes'); // MODIFI√â

      await schedulePeriodicReminders(
        userName: userName,
        userId: userId,
        urgentEvaluations: urgentEvaluations,
      );

    } catch (e) {
      print('‚ùå Erreur programmation depuis √©valuations (8h): $e'); // MODIFI√â
    }
  }

  // MODIFI√â : V√©rifier et reprogrammer si n√©cessaire (appel√© au d√©marrage de l'app)
  static Future<void> checkAndReschedule(
      String userName,
      int userId,
      List<dynamic> currentEvaluations,
      ) async {
    try {
      print('üîç V√©rification des rappels programm√©s (8h)...'); // MODIFI√â

      final FlutterLocalNotificationsPlugin notifications =
      FlutterLocalNotificationsPlugin();

      final pending = await notifications.pendingNotificationRequests();
      final periodicReminders = pending.where((notif) =>
      notif.id >= _periodicReminderBaseId && notif.id < _periodicReminderBaseId + 100
      ).toList();

      print('üìã ${periodicReminders.length} rappels p√©riodiques (8h) trouv√©s'); // MODIFI√â

      // MODIFI√â : Si moins de 3 rappels restants (au lieu de 5), reprogrammer
      if (periodicReminders.length < 3) { // MODIFI√â : 3 au lieu de 5 car les rappels sont plus espac√©s
        print('üîÑ Moins de 3 rappels (8h) restants, reprogrammation...'); // MODIFI√â
        await scheduleFromEvaluations(userName, userId, currentEvaluations);
      } else {
        print('‚úÖ Rappels (8h) suffisants, aucune action n√©cessaire'); // MODIFI√â
      }

    } catch (e) {
      print('‚ùå Erreur v√©rification rappels (8h): $e'); // MODIFI√â
    }
  }

  // Obtenir le statut des rappels programm√©s
  static Future<Map<String, dynamic>> getReminderStatus() async {
    try {
      final FlutterLocalNotificationsPlugin notifications =
      FlutterLocalNotificationsPlugin();

      final pending = await notifications.pendingNotificationRequests();
      final periodicReminders = pending.where((notif) =>
      notif.id >= _periodicReminderBaseId && notif.id < _periodicReminderBaseId + 100
      ).toList();

      final hasReprogramming = pending.any((notif) => notif.id == _backgroundNotificationId);

      return {
        'total_pending': pending.length,
        'periodic_reminders': periodicReminders.length,
        'has_reprogramming': hasReprogramming,
        'next_reminder': periodicReminders.isNotEmpty
            ? periodicReminders.first.title
            : null,
      };
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration statut (8h): $e'); // MODIFI√â
      return {
        'total_pending': 0,
        'periodic_reminders': 0,
        'has_reprogramming': false,
        'error': e.toString(),
      };
    }
  }
}